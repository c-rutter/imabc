[{"path":"https://c-rutter.github.io/imabc/articles/imabc.html","id":"introduction-to-imabc","dir":"Articles","previous_headings":"","what":"Introduction to IMABC","title":"imabc","text":"thorough introduction Incremental Mixture Approximate Bayesian Computation (IMABC) can found Rutter et al. (2019).","code":"library(imabc)"},{"path":"https://c-rutter.github.io/imabc/articles/priors.html","id":"defining-prior-distributions","dir":"Articles","previous_headings":"","what":"Defining Prior Distributions","title":"Defining Priors","text":"Parameters must unique names (unique name supplied given) come…","code":"priors <- define_priors(   # x1: Uniform Prior (from base R)   x1 = add_prior(     dist_base_name = \"unif\",     min = 0.2, max = 0.9   ),   # x2: Truncated Normal (from truncnorm package)   add_prior(     parameter_name = \"x2\",     density_fn = \"dtruncnorm\",     mean = 0.5, sd = 0.05, a = 0.4, b = 0.8, # a = min and b = max     min = 0.4, max = 0.8 # User must specify both in truncnorm   ),   # V3: Fixed parameter (not calibrated)   add_prior(0.5) )"},{"path":"https://c-rutter.github.io/imabc/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Carolyn Rutter. Author, copyright holder. Jonathan Ozik. Author. Nicholson Collier. Author. Christopher, E. Maerzluft. Author, maintainer.","code":""},{"path":"https://c-rutter.github.io/imabc/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Rutter C, Ozik J, Collier N, Maerzluft C (2022). imabc: Incremental Mixture Approximate Bayesian Computation (IMABC). R package version 1.0.2, https://github.com/c-rutter/imabc.","code":"@Manual{,   title = {imabc: Incremental Mixture Approximate Bayesian Computation (IMABC)},   author = {Carolyn Rutter and Jonathan Ozik and Nicholson Collier and Christopher, E. Maerzluft},   year = {2022},   note = {R package version 1.0.2},   url = {https://github.com/c-rutter/imabc}, }"},{"path":[]},{"path":"https://c-rutter.github.io/imabc/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Incremental Mixture Approximate Bayesian Computation (IMABC)","text":"can install latest released version CRAN : can install development version GitHub : packages needed : MASS data.table foreach parallel truncnorm lhs methods stats utils","code":"install.packages(\"imabc\") install.packages(\"devtools\") devtools::install_github(\"c-rutter/imabc\")"},{"path":[]},{"path":"https://c-rutter.github.io/imabc/index.html","id":"define-model-parameterspriors","dir":"","previous_headings":"Running the Code","what":"Define Model Parameters/Priors","title":"Incremental Mixture Approximate Bayesian Computation (IMABC)","text":"Parameters must unique names (unique name supplied given)","code":"priors <- define_priors(   # x1: Uniform Prior (from base R)   x1 = add_prior(     dist_base_name = \"unif\",     min = 0.2, max = 0.9   ),   # x2: Truncated Normal (from truncnorm package)   add_prior(     parameter_name = \"x2\",     density_fn = \"dtruncnorm\",     mean = 0.5, sd = 0.05, a = 0.4, b = 0.8, # a = min and b = max     min = 0.4, max = 0.8 # User must specify both in truncnorm   ),   # V3: Fixed parameter (not calibrated)   add_prior(0.5) )"},{"path":"https://c-rutter.github.io/imabc/index.html","id":"define-target-values","dir":"","previous_headings":"Running the Code","what":"Define Target Values","title":"Incremental Mixture Approximate Bayesian Computation (IMABC)","text":"Targets must unique names (unique name supplied given)","code":"targets <- define_targets(   # G1: Grouped targets include T1 and T2   G1 = group_targets(     T1 = add_target(       target = 1.5,       starting_range = c(1.0, 2.0),       stopping_range = c(1.49, 1.51)     ),     add_target(       target_name = \"T2\",       target = 0.5,       starting_range = c(0.2, 0.9),       stopping_range = c(0.49, 0.51)     )   ) )"},{"path":"https://c-rutter.github.io/imabc/index.html","id":"define-target-function","dir":"","previous_headings":"Running the Code","what":"Define Target Function","title":"Incremental Mixture Approximate Bayesian Computation (IMABC)","text":"target function must return vector whose length equal number targets. return vector named using target names order vector corrected imabc(). return vector named, targets added vector order added targets object. Finalize target function using define_target_function ensure function specified correctly imabc().","code":"fn1 <- function(x1, x2) { x1 + x2 + sample(c(-1, 1), 1)*rnorm(1, 0, 0.1) } fn2 <- function(x1, x2) { x1 * x2 + sample(c(-1, 1), 1)*rnorm(1, 0, 0.1) } fn <- function(x1, x2) {   res <- c()   res[\"T2\"] <- fn1(x1, x2)   res[\"T1\"] <- fn2(x1, x2)   return(res) } target_fun <- define_target_function(   targets, priors, FUN = fn, use_seed = FALSE )"},{"path":"https://c-rutter.github.io/imabc/index.html","id":"calibrate-model","dir":"","previous_headings":"Running the Code","what":"Calibrate Model","title":"Incremental Mixture Approximate Bayesian Computation (IMABC)","text":"primary function imabc(). inputs descriptions follows: target_fun: function generate target values given parameters (.e., `model’). use define_target_function stronlgy advised ensure function takes correct values correctly returns results. priors: priors object created using define_priors. contains information regarding parameters calibrated. ignored starting previous results. targets: targets object created using define_targets. contains information regarding target values used evaluate simulated parameters. ignored starting previous results. number large relative number parameters order ensure much parameter space explored possible. Setting number low result model getting stuck local minima. good rule thumb set 1000 x Number Parameters See note Center_n. work tandem N_centers define number centers around new parameter vectors generated. iteration imabc, N_centers best points selected current set good draws. imabc simulate Center_n draws based one N_center points. Sets minimum number good parameters sets required order simulate new parameter vectors based covariance good parameter sets. calibration achieved many good parameters, new parameters simulated around N_centers assumption parameters independent . also minimum number good parameter sets required model attempt narrow current target bounds towards stopping bounds. Setting N_cov_points low can result poor performance algorithm. good rule thumb least 10 x Number Parameters. final number accepted parameter sets produce target values within stopping bound ranges required calibration complete. sample_inflate: numeric(1). generating new results given center, many additional samples simulated ensure enough valid (within range) parameters draws simulated center. max_iter: numeric(1). maximum number iterations attempt. seed: numeric(1). seed set reproducibility. latinHypercube: logical(1). algorithm use Latin Hypercube generate first set parameters. backend_fun: function. advanced users . Lets user evaluate target function(s) using backend, .e., simulate targets alternative parallel method. necessary backend method compatible foreach. See details requirements. output_directory: character(1). Path save results . NULL (default), results saved. path provided results saved/updated every iteration. See details information. output_tag: character(1). Tag add result files names. “timestamp” (default) special code adds time date code executed. previous_results_dir: Optional character(1). Path results stored previous run. user wishes restart run didn’t complete calibration, can continue using outputs stored previous run. previous_results_tag: Optional character(1). tag added previous run output files. verbose: logical(1). Prints progress messages additional information model works. validate_run: logical(1). TRUE output_directory specified, function save parameters generated model - even ones deemed invalid based simulated targets. additional notes: * Regarding parallelization: user wishes take advantage parallelization can register parallel backend running imabc function (e.g. registerDoParallel(cores = detectCores() - 1)). imabc() uses foreach submit parameters target function works work imabc. register function user wishes use requires additional inputs beyond parameters data.table, target function, special values listed backend_fun description passed foreach specifically user must handle entire submission runs defining backend_fun option imabc. * moment, distance simulated targets set target values (desired targets) calculated following chisquare ((desired - simulated)2)/(desired2)) except case desired target 0. desired targets = 0, function replaces denominator 0.5 x range(stopping bounds): ((simulated)2)/((0.5 x (upper_bound_stop - lower_bound_stop))2). user wishes use stopping range scale target distances can set global option imabc.target_eval_distance “stopping_range” (.e. running imabc, run options(imabc.target_eval_distance = \"stopping_range\"))","code":"calibration_results <- imabc(   priors = priors,   targets = targets_nogroup,   target_fun = target_fun,   seed = 54321,   N_start = 2000,   N_centers = 2,   Center_n = 500,   N_cov_points = 50,   N_post = 100 )"},{"path":"https://c-rutter.github.io/imabc/index.html","id":"to-do","dir":"","previous_headings":"","what":"To do","title":"Incremental Mixture Approximate Bayesian Computation (IMABC)","text":"target modification parameter modification","code":""},{"path":"https://c-rutter.github.io/imabc/reference/PriorsSpecification.html","id":null,"dir":"Reference","previous_headings":"","what":"Specify the Prior Distributions for All Parameters — PriorsSpecification","title":"Specify the Prior Distributions for All Parameters — PriorsSpecification","text":"Helper functions can used create imabc priors object used imabc().","code":""},{"path":"https://c-rutter.github.io/imabc/reference/PriorsSpecification.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Specify the Prior Distributions for All Parameters — PriorsSpecification","text":"","code":"add_prior(   ...,   dist_base_name = NULL,   density_fn = NULL,   quantile_fn = NULL,   parameter_name = NULL )  define_priors(..., prior_df = NULL)  as.priors(df, ...)"},{"path":"https://c-rutter.github.io/imabc/reference/PriorsSpecification.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Specify the Prior Distributions for All Parameters — PriorsSpecification","text":"... Optional. add_prior: Named inputs passed RNG functions. define_priors: results add_prior calls - one parameter calibrated. dist_base_name Optional character(1). base name RNG function set (column dist_base_name info .priors) prior distribution. density_fn Optional character(1). name RNG density function (column density_fn info .priors) prior distribution. quantile_fn Optional character(1). name RNG quantile function (column quantile_fn info .priors) prior distribution. parameter_name Optional character(1). name parameter (column parameter_name info .priors). prior_df Optional data.frame. Priors stored data.frame results object previous run. df data.frame. parameter row column input add_prior. given column relate parameter, set value NA.","code":""},{"path":"https://c-rutter.github.io/imabc/reference/PriorsSpecification.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Specify the Prior Distributions for All Parameters — PriorsSpecification","text":"priors imabc object.","code":""},{"path":"https://c-rutter.github.io/imabc/reference/PriorsSpecification.html","id":"distribution-specifications","dir":"Reference","previous_headings":"","what":"Distribution Specifications","title":"Specify the Prior Distributions for All Parameters — PriorsSpecification","text":"user provide RNG functions specifications, must provide single value order create fixed parameter. efficient method using fixed parameter model. user provides one RNG functions specifications, functions search logical names functions. .e. dist_base_name provided (e.g. unif), assume user wishes use paste0(\"d\", dist_base_name) density function paste0(\"q\", dist_base_name) quantile function. functions make corresponding guesses user provides density_fn quantile_fn. density_fn quantile_fn provided, assume functions preferred calculated function names.","code":""},{"path":"https://c-rutter.github.io/imabc/reference/PriorsSpecification.html","id":"rng-input-specifications","dir":"Reference","previous_headings":"","what":"RNG Input Specifications","title":"Specify the Prior Distributions for All Parameters — PriorsSpecification","text":"functions attempt pass extra arguments RNG functions. arguments must named match expected inputs create errors. value's name matched RNG function input, ignored. min/max important values imabc always defined parameter. used evaluate whether simulated parameters valid. user can specify values want. user specify look RNG function RNG default values min/max use , otherwise use -Inf/Inf respectively. Warning: behavior depends RNG functions using min max input names min max values. RNG functions use alternate name concepts treat separate values. example can found truncnorm package uses b min max respectively. functions user need specify inputs , b, min, max order get consistent result.","code":""},{"path":"https://c-rutter.github.io/imabc/reference/PriorsSpecification.html","id":"parameter-names","dir":"Reference","previous_headings":"","what":"Parameter Names","title":"Specify the Prior Distributions for All Parameters — PriorsSpecification","text":"user can specify names either specifying input parameter_name add_prior setting result add_prior call object define_priors (e.g. define_priors(x1 = add_prior(...))). user specifies parameter_name input sets add_prior object, parameter_name value used. name specified unique name generated automatically.","code":""},{"path":"https://c-rutter.github.io/imabc/reference/PriorsSpecification.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Specify the Prior Distributions for All Parameters — PriorsSpecification","text":"","code":"add_prior(dist_base_name = \"norm\") #> $parameter #> NULL #>  #> $density_function #> function (n)  #> { #>     sims <- mapply(match.fun(density_fn), n, MoreArgs = density_inputs) #>     return(sims) #> } #> <bytecode: 0x55dcd90cd8b0> #> <environment: 0x55dcd90d0790> #>  #> $quantile_function #> function (n)  #> { #>     sims <- mapply(match.fun(quantile_fn), n, MoreArgs = quantile_inputs) #>     return(sims) #> } #> <bytecode: 0x55dcd90cd2c8> #> <environment: 0x55dcd90d0790> #>  #> $min #> [1] -Inf #>  #> $max #> [1] Inf #>  #> $distribution #> [1] \"norm\" #>  #> $fun_inputs #> NULL #>  #> attr(,\"class\") #> [1] \"prior\" \"imabc\" add_prior(density_fn = \"dnorm\", mean = 50, sd = 10) #> $parameter #> NULL #>  #> $density_function #> function (n)  #> { #>     sims <- mapply(match.fun(density_fn), n, MoreArgs = density_inputs) #>     return(sims) #> } #> <bytecode: 0x55dcd90cd8b0> #> <environment: 0x55dcd922a7e0> #>  #> $quantile_function #> function (n)  #> { #>     sims <- mapply(match.fun(quantile_fn), n, MoreArgs = quantile_inputs) #>     return(sims) #> } #> <bytecode: 0x55dcd90cd2c8> #> <environment: 0x55dcd922a7e0> #>  #> $min #> [1] -Inf #>  #> $max #> [1] Inf #>  #> $distribution #> [1] \"norm\" #>  #> $fun_inputs #> mean   sd  #>   50   10  #>  #> attr(,\"class\") #> [1] \"prior\" \"imabc\" add_prior(quantile_fn = \"qnorm\", min = 0, max = 1) #> $parameter #> NULL #>  #> $density_function #> function (n)  #> { #>     sims <- mapply(match.fun(density_fn), n, MoreArgs = density_inputs) #>     return(sims) #> } #> <bytecode: 0x55dcd90cd8b0> #> <environment: 0x55dcd929c480> #>  #> $quantile_function #> function (n)  #> { #>     sims <- mapply(match.fun(quantile_fn), n, MoreArgs = quantile_inputs) #>     return(sims) #> } #> <bytecode: 0x55dcd90cd2c8> #> <environment: 0x55dcd929c480> #>  #> $min #> [1] 0 #>  #> $max #> [1] 1 #>  #> $distribution #> [1] \"norm\" #>  #> $fun_inputs #> NULL #>  #> attr(,\"class\") #> [1] \"prior\" \"imabc\"  # x1, x2, and x3 reflect three parameters in the mdoel. x1 <- add_prior(dist_base_name = \"norm\") define_priors(   x1 = x1,   x2 = add_prior(density_fn = \"dnorm\", mean = 50, sd = 10),   add_prior(parameter_name = \"x3\", quantile_fn = \"qnorm\", min = 0, max = 1) ) #> There are 3 defined parameters. #>  #> Parameter x1 has the following specifications: #> Distribution base name: norm #> User specified inputs: NA #> Allowable range: -Inf - Inf #> Empirical Standard Deviation: 0 #>  #> Parameter x2 has the following specifications: #> Distribution base name: norm #> User specified inputs: mean = 50, sd = 10 #> Allowable range: -Inf - Inf #> Empirical Standard Deviation: 0 #>  #> Parameter x3 has the following specifications: #> Distribution base name: norm #> User specified inputs: NA #> Allowable range: 0 - 1 #> Empirical Standard Deviation: 0  x1_min <- 0.1 x2_min <- 0.5 x1_max <- 0.9 x2_max <- 1.1 df <- data.frame(   name_var = c(\"x1\", \"x2\", \"x3\"),   dist_var = c(\"unif\", NA, NA),   density_var = c(NA, \"dtruncnorm\", NA),   quantile_var = c(NA, NA, \"qnorm\"),   mean = c(NA, 0.75, 0.5),   sd = c(NA, 0.05, NA),   min = c(x1_min, x2_min, NA),   max = c(x1_max, x2_max, NA),   a = c(NA, x2_min, NA),   b = c(NA, x2_max, NA) ) as.priors(   df,   parameter_name = \"name_var\", dist_base_name = \"dist_var\",   density_fn = \"density_var\", quantile_fn = \"quantile_var\" ) #> There are 3 defined parameters. #>  #> Parameter x1 has the following specifications: #> Distribution base name: unif #> User specified inputs: min = 0.1, max = 0.9 #> Allowable range: 0.1 - 0.9 #> Empirical Standard Deviation: 0 #>  #> Parameter x2 has the following specifications: #> Distribution base name: truncnorm #> User specified inputs: mean = 0.75, sd = 0.05, a = 0.5, b = 1.1 #> Allowable range: 0.5 - 1.1 #> Empirical Standard Deviation: 0 #>  #> Parameter x3 has the following specifications: #> Distribution base name: norm #> User specified inputs: mean = 0.5 #> Allowable range: -Inf - Inf #> Empirical Standard Deviation: 0"},{"path":"https://c-rutter.github.io/imabc/reference/TargetsSpecifications.html","id":null,"dir":"Reference","previous_headings":"","what":"Specify Targets — TargetsSpecifications","title":"Specify Targets — TargetsSpecifications","text":"Helper functions can used create imabc targets object used imabc().","code":""},{"path":"https://c-rutter.github.io/imabc/reference/TargetsSpecifications.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Specify Targets — TargetsSpecifications","text":"","code":"add_target(   target,   starting_range,   stopping_range,   target_name = NULL,   FUN = NULL )  group_targets(..., group_name = NULL)  define_targets(..., target_df = NULL)  as.targets(df, ...)"},{"path":"https://c-rutter.github.io/imabc/reference/TargetsSpecifications.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Specify Targets — TargetsSpecifications","text":"target numeric(1). value target function aiming . starting_range numeric(2). initial range values imabc consider good testing simulated parameters. stopping_range numeric(2). range values target function's simulated value must within considered calibrated. target_name Optional character(1). name target. FUN Optional function. function takes parameters calculated target value. See Target Function. ... group_targets: results add_target calls - one target within grouping targets. See Target Groups. define_targets: results add_target /group_target calls - one target grouping targets. .targets: alternate column names target settings can one target_names, targets, current_lower_bounds, current_upper_bounds, stopping_lower_bounds, stopping_upper_bounds group_name Optional character(1). name grouping targets. target_df Optional data.frame. Targets stored data.frame results object previous run. df data.frame. row target columns represent different pieces information relevant targets.","code":""},{"path":"https://c-rutter.github.io/imabc/reference/TargetsSpecifications.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Specify Targets — TargetsSpecifications","text":"targets imabc object.","code":""},{"path":"https://c-rutter.github.io/imabc/reference/TargetsSpecifications.html","id":"target-values","dir":"Reference","previous_headings":"","what":"Target Values","title":"Specify Targets — TargetsSpecifications","text":"specifying values following condition must always hold true: imabc simulates parameters, test using target function(s) starting range. Parameters whose values fall within starting range kept next iteration used generate new parameters testing. parameters get better falling withing initial range, imabc reduce valid range targets considered. current valid range matches stopping range algorithm longer reduce valid range target values.","code":"starting_range[1] <= stopping_range[1] <= target <= stopping_range[2] <= starting_range[2]"},{"path":"https://c-rutter.github.io/imabc/reference/TargetsSpecifications.html","id":"target-groups","dir":"Reference","previous_headings":"","what":"Target Groups","title":"Specify Targets — TargetsSpecifications","text":"grouped target refers set scalar targets gathered part study otherwise refer series outcomes, outcomes reported age, sex, time (time series). targets grouped imabc constrict range valid target values relative least improved target within group targets. lets range simulated parameters stay wide enough continue improving targets.","code":""},{"path":"https://c-rutter.github.io/imabc/reference/TargetsSpecifications.html","id":"target-names","dir":"Reference","previous_headings":"","what":"Target Names","title":"Specify Targets — TargetsSpecifications","text":"user can specify names either specifying input target_name add_target setting result add_target call object group_targets define_targets (e.g. group_targets(t1 = add_target(...))). user specifies target_name input sets add_target object, target_name value used. name specified unique name generated automatically. rules also applies groups targets group_name input group_targets. However, group_targets can added input define_targets. single target added define_targets group name.","code":""},{"path":"https://c-rutter.github.io/imabc/reference/TargetsSpecifications.html","id":"target-function","dir":"Reference","previous_headings":"","what":"Target Function","title":"Specify Targets — TargetsSpecifications","text":"multiple ways specify target function. One way attach target object using FUN input add_target. inputs target function can either single object (e.g. function(x)) several objects whose name equal parameter represent (e.g. function(x1, x2)). single object used, user can assume name vector parameters specified priors object passed function order vector order specified define_priors. example, someone specified three parameters named x1, x3, x2 respectively following specifications equivalent: Additionally, complex situations user may also reference targets object priors object within target function must specify inputs (e.g. function(x, targets, priors)) use objects exist within objects. See define_target_function details ways specify target function.","code":"function(x1, x3) { x1 + x3 } == function(x) { x[\"x1\"] + x[\"x3\"] } == function(x) { x[1] + x[2] }"},{"path":"https://c-rutter.github.io/imabc/reference/TargetsSpecifications.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Specify Targets — TargetsSpecifications","text":"","code":"add_target(target = 0.5, starting_range = c(0.2, 0.9), stopping_range = c(0.48, 0.51)) #> $target_name #> NULL #>  #> $target #> [1] 0.5 #>  #> $current_lower_bound #> [1] 0.2 #>  #> $current_upper_bound #> [1] 0.9 #>  #> $stopping_lower_bound #> [1] 0.48 #>  #> $stopping_upper_bound #> [1] 0.51 #>  #> $FUN #> NULL #>  #> attr(,\"class\") #> [1] \"target\" add_target(   target = 1.5, starting_range = c(1.0, 2.0), stopping_range = c(1.49, 1.51),   FUN = function(x1, x2) { x1 + x2 + rnorm(1, 0, 0.01) } ) #> $target_name #> NULL #>  #> $target #> [1] 1.5 #>  #> $current_lower_bound #> [1] 1 #>  #> $current_upper_bound #> [1] 2 #>  #> $stopping_lower_bound #> [1] 1.49 #>  #> $stopping_upper_bound #> [1] 1.51 #>  #> $FUN #> function(x1, x2) { x1 + x2 + rnorm(1, 0, 0.01) } #> <environment: 0x55dcdabca2e8> #>  #> attr(,\"class\") #> [1] \"target\"  group_targets(   targ1 = add_target(target = 0.5, starting_range = c(0.2, 0.9), stopping_range = c(0.48, 0.51)),   add_target(     target_name = \"targ2\",     target = 1.5, starting_range = c(1.0, 2.0), stopping_range = c(1.49, 1.51),     FUN = function(x1, x2) { x1 + x2 + rnorm(1, 0, 0.01) }   ) ) #> $targ1 #> $target_name #>   targ1  #> \"targ1\"  #>  #> $target #> [1] 0.5 #>  #> $current_lower_bound #> [1] 0.2 #>  #> $current_upper_bound #> [1] 0.9 #>  #> $stopping_lower_bound #> [1] 0.48 #>  #> $stopping_upper_bound #> [1] 0.51 #>  #> $FUN #> NULL #>  #> attr(,\"class\") #> [1] \"target\" #>  #> [[2]] #> $target_name #> [1] \"targ2\" #>  #> $target #> [1] 1.5 #>  #> $current_lower_bound #> [1] 1 #>  #> $current_upper_bound #> [1] 2 #>  #> $stopping_lower_bound #> [1] 1.49 #>  #> $stopping_upper_bound #> [1] 1.51 #>  #> $FUN #> function(x1, x2) { x1 + x2 + rnorm(1, 0, 0.01) } #> <environment: 0x55dcdabca2e8> #>  #> attr(,\"class\") #> [1] \"target\" #>  #> $group_name #> [1] NA #>  #> attr(,\"class\") #> [1] \"target\" \"group\"  \"imabc\"  define_targets(   group1 = group_targets(     targ1 = add_target(target = 0.5, starting_range = c(0.2, 0.9), stopping_range = c(0.48, 0.51)),     add_target(       target_name = \"targ2\",       target = 1.5, starting_range = c(1.0, 2.0), stopping_range = c(1.49, 1.51)     )   ),   targ3 = add_target(target = 1, starting_range = c(0.2, 1.9), stopping_range = c(0.9, 1.1)) ) #> Target Group: group1 #>                        targ1 targ2 #>   Current Lower Bounds  0.20  1.00 #>  Lower Stopping Bounds  0.48  1.49 #>                 Target  0.50  1.50 #>  Upper Stopping Bounds  0.51  1.51 #>   Current Upper Bounds  0.90  2.00 #>  #> Single Target #>                        targ3 #>   Current Lower Bounds   0.2 #>  Lower Stopping Bounds   0.9 #>                 Target   1.0 #>  Upper Stopping Bounds   1.1 #>   Current Upper Bounds   1.9 #>   df <- data.frame(   target_groups = c(\"G1\", \"G1\", NA),   target_names = c(\"T1\", \"T3\", \"T2\"),   targets = c(1.5, 0.5, -1.5),   current_lower_bounds = c(1, 0.2, -2),   current_upper_bounds = c(2, 0.9, -1),   stopping_lower_bounds = c(1.49, 0.49, -1.51),   stopping_upper_bounds = c(1.51, 0.51, -1.49) ) as.targets(df) #> Target Group: G1 #>                          T1   T3 #>   Current Lower Bounds 1.00 0.20 #>  Lower Stopping Bounds 1.49 0.49 #>                 Target 1.50 0.50 #>  Upper Stopping Bounds 1.51 0.51 #>   Current Upper Bounds 2.00 0.90 #>  #> Single Target #>                           T2 #>   Current Lower Bounds -2.00 #>  Lower Stopping Bounds -1.51 #>                 Target -1.50 #>  Upper Stopping Bounds -1.49 #>   Current Upper Bounds -1.00 #>"},{"path":"https://c-rutter.github.io/imabc/reference/define_target_function.html","id":null,"dir":"Reference","previous_headings":"","what":"Define Target Function(s) — define_target_function","title":"Define Target Function(s) — define_target_function","text":"Helps user build target function applies parameters function set functions. results function compared target goals determine goodness fit parameters.","code":""},{"path":"https://c-rutter.github.io/imabc/reference/define_target_function.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Define Target Function(s) — define_target_function","text":"","code":"define_target_function(targets, priors, FUN = NULL, use_seed = FALSE)"},{"path":"https://c-rutter.github.io/imabc/reference/define_target_function.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Define Target Function(s) — define_target_function","text":"targets targets object. Created using define_targets function. Available use within target function(s) See Details. priors priors object. Created using define_priors function. Available use within target function(s) See Details. FUN Optional function. user define target functions using define_targets, can specify single function . See Details. use_seed logical. algorithm set seed set parameters sent target function(s). seed set set parameters.","code":""},{"path":"https://c-rutter.github.io/imabc/reference/define_target_function.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Define Target Function(s) — define_target_function","text":"imabc ready function.","code":""},{"path":"https://c-rutter.github.io/imabc/reference/define_target_function.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Define Target Function(s) — define_target_function","text":"FUN: user can define function target create using add_target, may times user wants control functions evaluated. example, one target may function another target parameter. target functions created using define_targets, first function evaluated twice. However, using FUN, user can create function `T1 = f(x1)` `T2 = g(T1, x2)`. especially helpful target functions take long time run. Specifying Parameters Target Function Inputs: Whether specifying target functions individually FUN input, inputs must follow certain set rules order applied correctly. important remember input(s) ultimately based values specified priors object. Thus target function(s) inputs reference parameters. can done either single vector values (e.g. `function(x)  ... `), individual inputs parameter (e.g. `function(x1, x2)  ... `). single vector used, parameters passed target function named vector user can reference vector either using parameter names (e.g. `x[\"x1\"]`) using order parameter added define_priors index number (e.g. `x[1]`). individual inputs given parameter, ones specified inputs sent given target function. route taken inputs target function must match name(s) parameters used. single vector method useful creating single target function FUN, individual inputs method nice simple target functions added via defined_targets. Special Target Function Inputs: Beyond specifying parameters, user may optionally choose include targets priors objects inputs target function(s). inputs must specified targets priors respectively (e.g. `function(x, targets, priors)`). give access values defined updated course calibration. using FUN, can especially useful one target calculation extremely fast another one extremely slow; user can simulate first, check target bounds, choose sidestep slower target function order get speed boost entire calibration. see values available object use names function recently created object class. Target Function Outputs: define_targets handle outputs appropriately imabc, user must careful specifying target function FUN. required results FUN vector whose length equal number targets defined. vector named, imabc ensure order vector correct performing calculations results. names must match names given targets define_targets; provide names, can find generated names using `attr(targets, \"target_names\")`. vector named, order results vector must match order targets added define_targets.","code":""},{"path":"https://c-rutter.github.io/imabc/reference/define_target_function.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Define Target Function(s) — define_target_function","text":"","code":"priors <- define_priors(   x1 = add_prior(dist_base_name = \"unif\"),   x2 = add_prior(density_fn = \"dnorm\", mean = 0.5, sd = 0.25) ) targets <- define_targets(   T1 = add_target(target = 0.5, starting_range = c(0.2, 0.9), stopping_range = c(0.48, 0.51)),   add_target(     target_name = \"T2\",     target = 1.5, starting_range = c(1.0, 2.0), stopping_range = c(1.49, 1.51)   ) ) fn1 <- function(x1, x2) { x1 + x2 + sample(c(-1, 1), 1)*rnorm(1, 0, 0.1) } fn2 <- function(x1, x2) { x1 * x2 + sample(c(-1, 1), 1)*rnorm(1, 0, 0.1) } fn <- function(x1, x2) {   res <- c()   res[\"T2\"] <- fn2(x1, x2)   res[\"T1\"] <- fn1(x1, x2)   return(res) } target_fun <- define_target_function(targets, priors, FUN = fn, use_seed = FALSE)"},{"path":"https://c-rutter.github.io/imabc/reference/imabc.html","id":null,"dir":"Reference","previous_headings":"","what":"Incremental Mixture Approximate Bayesian Computation (IMABC) — imabc","title":"Incremental Mixture Approximate Bayesian Computation (IMABC) — imabc","text":"Calibrates model using IMABC algorithm.","code":""},{"path":"https://c-rutter.github.io/imabc/reference/imabc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Incremental Mixture Approximate Bayesian Computation (IMABC) — imabc","text":"","code":"imabc(   target_fun,   priors = NULL,   targets = NULL,   N_start = 1,   N_centers = 1,   Center_n = 50,   N_cov_points = 0,   N_post = 100,   sample_inflate = 1.5,   max_iter = 1000,   seed = NULL,   latinHypercube = TRUE,   backend_fun = NULL,   output_directory = NULL,   output_tag = \"timestamp\",   previous_results_dir = NULL,   previous_results_tag = NULL,   verbose = TRUE,   validate_run = TRUE )"},{"path":"https://c-rutter.github.io/imabc/reference/imabc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Incremental Mixture Approximate Bayesian Computation (IMABC) — imabc","text":"target_fun function generate target values given parameters  (.e., `model'). use define_target_function stronlgy advised ensure function takes correct values correctly returns results. priors priors object created using define_priors. contains information regarding parameters calibrated. ignored starting previous results. targets targets object created using define_targets. contains information regarding target values used evaluate simulated parameters. ignored starting previous results. N_start numeric(1). number draws simulate first iteration. N_centers numeric(1). number centers use exploring parameter space. Center_n numeric(1). number points add around center N_cov_points numeric(1). minimum number points used estimate covariance matrix valid parameters nearest center point. covariance matrix used simulating new parameter draws around center. 0 (default), uses 25*number parameters. N_post numeric(1). weighted sample size must achieved using valid parameter values order stop algorithm. sample_inflate numeric(1). generating new results given center, many additional samples simulated ensure enough valid (within range) parameters draws simulated center. max_iter numeric(1). maximum number iterations attempt. seed numeric(1). seed set reproducibility. latinHypercube logical(1). algorithm use Latin Hypercube generate first set parameters. backend_fun function. advanced users . Lets user evaluate target function(s) using backend, .e., simulate targets alternative parallel method. necessary backend method compatible foreach. See details requirements. output_directory character(1). Path save results . NULL (default), results saved. path provided results saved/updated every iteration. See details information. output_tag character(1). Tag add result files names. \"timestamp\" (default) special code adds time date code executed. previous_results_dir Optional character(1). Path results stored previous run. user wishes restart run complete calibration, can continue using outputs stored previous run. previous_results_tag Optional character(1). tag added previous run output files. verbose logical(1). Prints progress messages additional information model works. validate_run logical(1). TRUE output_directory specified, function save parameters generated model - even ones deemed invalid based simulated targets.","code":""},{"path":"https://c-rutter.github.io/imabc/reference/imabc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Incremental Mixture Approximate Bayesian Computation (IMABC) — imabc","text":"list : good_parm_draws - data.table valid parameters current target bounds good_sim_target - data.table simulated target results good_parm_draws parameters good_target_dist - data.table distances based simulated good target results mean_cov - data.frame means covariances parameters iterations good parameters N_cov_points priors - prior object empirical standard deviation first N_start generated values targets - target object updated bounds based calibration metaddata - Important info regarding function inputs current set results including current_iteration (last iteration completed) last_draw (total number draws simulated execution) validate_run = TRUE, includes: all_iter_parm_draws - parameters generated algorithm, even ones results target values outside current target bounds all_iter_sim_target - simulated target values parameters all_iter_parm_draws all_iter_target_dist - distances based simulated target results","code":""},{"path":"https://c-rutter.github.io/imabc/reference/imabc.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Incremental Mixture Approximate Bayesian Computation (IMABC) — imabc","text":"user specifies calibrated parameters, prior distributions, calibration targets initial final acceptance intervals, function (.e.,  model) used generate targets given calibrated parameters algorithm begins drawing sample vectors parameter space based prior distributions. initial sample can drawn using Latin hypercube. algorithm identifies retains parameter vectors result generated targets within current acceptance intervals. algorithm iteratively updates sample narrows acceptance intervals either 1) algorithm reaches final acceptance intervals around target identifies requested sample parameter vectors generate targets within acceptance intervals, algorithm completes maximum number iterations. algorithm can restarted continue iterating. technical description imabc algorithm provided Rutter CM, Ozik J, DeYoreo M, Collier N. Microsimulation model calibration using incremental mixture approximate Bayesian computation. Ann. Appl. Stat. 13 (2019), . 4, 2189-2212. doi:10.1214/19-AOAS1279. https://projecteuclid.org/euclid.aoas/1574910041. imabc package implements small modification approach described 2019 AOAS paper. imabc package, user specifies initial final acceptance intervals directly. approach flexible approach described paper easily incorporates asymmetric acceptance intervals.","code":""},{"path":"https://c-rutter.github.io/imabc/reference/imabc.html","id":"n-cov-points-relation-to-the-number-of-parameters-","dir":"Reference","previous_headings":"","what":"N_cov_points relation to the number of parameters:","title":"Incremental Mixture Approximate Bayesian Computation (IMABC) — imabc","text":"algorithm enough quality draws, estimates covariance parameters uses relations order improve future simulations parameters. However, can work covariance matrix singular. covariance matrix singular, imabc replace independent covariance matrix (diagonal matrix variances parameters) avoid calculation errors. Setting N_cov_points less number parameters lead singularness covariance matrix. algorithm can still run efficient may able calibrate completely.","code":""},{"path":"https://c-rutter.github.io/imabc/reference/imabc.html","id":"custom-backend-function-","dir":"Reference","previous_headings":"","what":"Custom Backend Function:","title":"Incremental Mixture Approximate Bayesian Computation (IMABC) — imabc","text":"primary run handler takes row simulated draws provides appropriate information target_fun function inputs. includes pulling parameter values named vector, pulling unique seed generated set parameters, well passing current priors targets objects. done using foreach function foreach package. allows user register preferred parallel backend running imabc function long compatible foreach. user provide parallel backend, foreach run analysis sequence default provide warning indicating first time imabc function run within session. However, since parallel backends compatible method, provided way user add run handling method. utilize feature, user must create function meets couple requirements order work properly. first requirement backend function inputs following order: data.table parameters evaluated, names parameters calibrated, target function used evaluating parameters, list includes priors object targets object. user can name inputs whatever prefer correct order number inputs expected (.e. user must create function four inputs, first parameter data.table, .). user can utilize piece info passed parameters well. includes unique seed values passed column parameter data.table (called \"seed\"), current targets priors objects passed fourth input. priors targets objects named priors targets respectively fourth input list. last requirement returned object data.table simulated target values. row represents set results target_fun given set parameters column represents target value based targets object. final output custom backend returns data.table column names identical target names, order columns verified imabc. final output backend include column names match target names, user must ensure order targets object. appropriate order, information may attached wrong target lead errors. use custom backend unless confident understand expected run handler. get better understanding done run View(imabc:::run_handler) console see backend_fun used.","code":""},{"path":"https://c-rutter.github.io/imabc/reference/imabc.html","id":"output-files-","dir":"Reference","previous_headings":"","what":"Output Files:","title":"Incremental Mixture Approximate Bayesian Computation (IMABC) — imabc","text":"output directory specified files saved objects returned function. named follows: Good_SimulatedParameters_tag.csv = good_parm_draws Good_SimulatedTargets_tag.csv    = good_sim_target Good_SimulatedDistances_tag.csv  = good_target_dist MeanCovariance_tag.csv           = mean_cov CurrentPriors_tag.csv            = priors CurrentTargets_tag.csv           = targets RunMetadata_tag.csv              = metaddata validate_run = TRUE, includes: SimulatedParameters_tag.csv      = all_iter_parm_draws SimulatedTargets_tag.csv         = all_iter_sim_target SimulatedDistances_tags.csv      = all_iter_target_dist","code":""},{"path":"https://c-rutter.github.io/imabc/reference/read_previous_results.html","id":null,"dir":"Reference","previous_headings":"","what":"Read Previous Results — read_previous_results","title":"Read Previous Results — read_previous_results","text":"Searches files found path files saved imabc run reads current environment.","code":""},{"path":"https://c-rutter.github.io/imabc/reference/read_previous_results.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read Previous Results — read_previous_results","text":"","code":"read_previous_results(path, tag = NULL)"},{"path":"https://c-rutter.github.io/imabc/reference/read_previous_results.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read Previous Results — read_previous_results","text":"path character(1). location files saved previous run. tag Optional character(1). multiple runs saved single path, provide tag differentiates .","code":""},{"path":"https://c-rutter.github.io/imabc/reference/read_previous_results.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read Previous Results — read_previous_results","text":"list priors object, targets object, list data.frames needed continue calibration   imabc().","code":""},{"path":"https://c-rutter.github.io/imabc/reference/read_previous_results.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Read Previous Results — read_previous_results","text":"tag required multiple sets results stored single location. output function necessary restart, user need use function   restarting calibration. imabc() handles function user via previous_results_* input options.","code":""},{"path":"https://c-rutter.github.io/imabc/news/index.html","id":"imabc-101","dir":"Changelog","previous_headings":"","what":"imabc 1.0.1","title":"imabc 1.0.1","text":"Added NEWS.md file track changes package. Fixes error validate_runs = TRUE saving iterations good_* files.","code":""}]
